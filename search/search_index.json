{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"OAI Dashboard Documentation","text":"<p>Welcome to the official documentation site for the OAI Dashboard \u2014 a web-based platform for managing OpenAirInterface and 5G test environments.</p>"},{"location":"#key-features","title":"Key Features","text":"<ul> <li>Launch and monitor gNodeB and 5G Core</li> <li>View system metrics via Prometheus</li> <li>Manage VM-based simulations using OpenStack</li> <li>Control your lab from one clean UI</li> </ul>"},{"location":"#project-overview","title":"Project overview","text":""},{"location":"#get-started","title":"Get Started","text":"<ul> <li>Usage Guide</li> <li>Intern Roadmap</li> </ul>"},{"location":"intern-roadmap/","title":"Internship Roadmap","text":"<p>====================</p> <p>2 intern : - Rapha\u00ebl : Frontend - Th\u00e9o : Backend</p> <p>Supervisor : Cl\u00e9ment</p>"},{"location":"intern-roadmap/#roadmap-overview","title":"Roadmap Overview","text":"<p>3 month internship with the following goals:</p> <ul> <li>[ ] Define the specification of the project</li> <li>[ ] Define the architecture ( Provide by Cl\u00e9ment )</li> <li>[ ] Define the technologies to be used ( Provide by Cl\u00e9ment )</li> <li>[ ] Define the features to be implemented <ul> <li>[ ] define metrics to be monitored ( Th\u00e9o )</li> <li>[ ] Define widgets to be displayed ( Rapha\u00ebl ) </li> <li>[ ] Define routes ( Th\u00e9o )</li> </ul> </li> <li>[ ] Create a web dashboard to monitor the 5G architecture</li> <li>[ ] Frontend ( Rapha\u00ebl )<ul> <li>[ ] Create a web page to display the metrics</li> <li>[ ] Create a web page to display the widgets</li> <li>[ ] Write a dockerfile</li> </ul> </li> <li>[ ] Backend ( Th\u00e9o )<ul> <li>[ ] implement routes </li> <li>[ ] Implement script for pushing data to the time serie data base </li> <li>[ ] Implement script for pulling data from the time serie data base </li> <li>[ ] write a dockerfile </li> </ul> </li> </ul>"},{"location":"api/backend/","title":"API Reference","text":""},{"location":"api/backend/#example.ToDo","title":"<code>ToDo</code>","text":"<p>               Bases: <code>ToDoCreate</code></p> <p>Schema for a to-do item, including a unique identifier.</p> Source code in <code>backend/example.py</code> <pre><code>class ToDo(ToDoCreate):\n    \"\"\"\n    Schema for a to-do item, including a unique identifier.\n    \"\"\"\n    id: UUID\n</code></pre>"},{"location":"api/backend/#example.ToDoCreate","title":"<code>ToDoCreate</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Schema for creating a new to-do item.</p> Source code in <code>backend/example.py</code> <pre><code>class ToDoCreate(BaseModel):\n    \"\"\"\n    Schema for creating a new to-do item.\n    \"\"\"\n    title: str\n    description: Optional[str] = None\n    completed: bool = False\n</code></pre>"},{"location":"api/backend/#example.create_todo","title":"<code>create_todo(todo)</code>","text":"<p>Create a new to-do item.</p> <p>Parameters:</p> Name Type Description Default <code>todo</code> <code>ToDoCreate</code> <p>The to-do item to be created.</p> required <p>Returns:</p> Type Description <p>The newly created to-do item with a unique UUID.</p> Source code in <code>backend/example.py</code> <pre><code>@app.post(\"/todos\", response_model=ToDo, status_code=201, tags=[\"To-Dos\"])\ndef create_todo(todo: ToDoCreate):\n    \"\"\"\n    Create a new to-do item.\n\n    Args:\n        todo (ToDoCreate): The to-do item to be created.\n\n    Returns:\n        The newly created to-do item with a unique UUID.\n    \"\"\"\n    new_todo = ToDo(id=uuid4(), **todo.dict())\n    todos.append(new_todo)\n    return new_todo\n</code></pre>"},{"location":"api/backend/#example.delete_todo","title":"<code>delete_todo(todo_id)</code>","text":"<p>Delete a to-do item by its UUID.</p> <p>Parameters:</p> Name Type Description Default <code>todo_id</code> <code>UUID</code> <p>The unique identifier of the to-do item to delete.</p> required <p>Returns:</p> Type Description <p>No content if deletion is successful.</p> <p>Raises:</p> Type Description <code>HTTPException</code> <p>If the to-do item does not exist.</p> Source code in <code>backend/example.py</code> <pre><code>@app.delete(\"/todos/{todo_id}\", status_code=204, tags=[\"To-Dos\"])\ndef delete_todo(todo_id: UUID):\n    \"\"\"\n    Delete a to-do item by its UUID.\n\n    Args:\n        todo_id (UUID): The unique identifier of the to-do item to delete.\n\n    Returns:\n        No content if deletion is successful.\n\n    Raises:\n        HTTPException: If the to-do item does not exist.\n    \"\"\"\n    for idx, todo in enumerate(todos):\n        if todo.id == todo_id:\n            todos.pop(idx)\n            return\n    raise HTTPException(status_code=404, detail=\"To-Do not found\")\n</code></pre>"},{"location":"api/backend/#example.get_all_todos","title":"<code>get_all_todos()</code>","text":"<p>Retrieve all to-do items.</p> <p>Returns:</p> Type Description <p>A list of all to-do tasks currently stored in memory.</p> Source code in <code>backend/example.py</code> <pre><code>@app.get(\"/todos\", response_model=List[ToDo], tags=[\"To-Dos\"])\ndef get_all_todos():\n    \"\"\"\n    Retrieve all to-do items.\n\n    Returns:\n        A list of all to-do tasks currently stored in memory.\n    \"\"\"\n    return todos\n</code></pre>"},{"location":"api/backend/#example.get_todo","title":"<code>get_todo(todo_id)</code>","text":"<p>Retrieve a single to-do item by its UUID.</p> <p>Parameters:</p> Name Type Description Default <code>todo_id</code> <code>UUID</code> <p>The unique identifier of the to-do item.</p> required <p>Returns:</p> Type Description <p>The to-do item matching the given UUID.</p> <p>Raises:</p> Type Description <code>HTTPException</code> <p>If no item with the given UUID is found.</p> Source code in <code>backend/example.py</code> <pre><code>@app.get(\"/todos/{todo_id}\", response_model=ToDo, tags=[\"To-Dos\"])\ndef get_todo(todo_id: UUID):\n    \"\"\"\n    Retrieve a single to-do item by its UUID.\n\n    Args:\n        todo_id (UUID): The unique identifier of the to-do item.\n\n    Returns:\n        The to-do item matching the given UUID.\n\n    Raises:\n        HTTPException: If no item with the given UUID is found.\n    \"\"\"\n    for todo in todos:\n        if todo.id == todo_id:\n            return todo\n    raise HTTPException(status_code=404, detail=\"To-Do not found\")\n</code></pre>"},{"location":"api/backend/#example.read_root","title":"<code>read_root()</code>","text":"<p>Root endpoint for health check or welcome message.</p> <p>Returns a simple JSON message indicating the API is working.</p> Source code in <code>backend/example.py</code> <pre><code>@app.get(\"/\", tags=[\"Root\"])\ndef read_root():\n    \"\"\"\n    Root endpoint for health check or welcome message.\n\n    Returns a simple JSON message indicating the API is working.\n    \"\"\"\n    return {\"message\": \"Welcome to the To-Do API!\"}\n</code></pre>"},{"location":"api/backend/#example.update_todo","title":"<code>update_todo(todo_id, updated_todo)</code>","text":"<p>Update an existing to-do item.</p> <p>Parameters:</p> Name Type Description Default <code>todo_id</code> <code>UUID</code> <p>The UUID of the to-do item to update.</p> required <code>updated_todo</code> <code>ToDoCreate</code> <p>The updated task data.</p> required <p>Returns:</p> Type Description <p>The updated to-do item.</p> <p>Raises:</p> Type Description <code>HTTPException</code> <p>If the to-do item does not exist.</p> Source code in <code>backend/example.py</code> <pre><code>@app.put(\"/todos/{todo_id}\", response_model=ToDo, tags=[\"To-Dos\"])\ndef update_todo(todo_id: UUID, updated_todo: ToDoCreate):\n    \"\"\"\n    Update an existing to-do item.\n\n    Args:\n        todo_id (UUID): The UUID of the to-do item to update.\n        updated_todo (ToDoCreate): The updated task data.\n\n    Returns:\n        The updated to-do item.\n\n    Raises:\n        HTTPException: If the to-do item does not exist.\n    \"\"\"\n    for idx, todo in enumerate(todos):\n        if todo.id == todo_id:\n            todos[idx] = ToDo(id=todo_id, **updated_todo.dict())\n            return todos[idx]\n    raise HTTPException(status_code=404, detail=\"To-Do not found\")\n</code></pre>"}]}